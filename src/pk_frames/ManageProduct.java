package pk_frames;

import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import pk_inventorymanagment.Category;
import pk_inventorymanagment.Product;

public class ManageProduct extends javax.swing.JFrame {

    private int productpk = 0;
    private int totalQuantity = 0;

    private Product product = new Product();

    public ManageProduct() {
        initComponents();
        setLocationRelativeTo(null);
    }

    private void getAllCategory() {
        comboCategory.removeAllItems();
        Category category = new Category();
        ArrayList<Category> categorys = category.getAllCategory();
        for (Category category1 : categorys) {
            comboCategory.addItem(category1.getCategory_id() + "-" + category1.getName());
        }
    }

    private boolean validateFields(String formType) {
        if (formType.equals("edit") && !txtName.getText().isEmpty() && !txtPrice.getText().isEmpty()
                && !txtDescription.getText().isEmpty() && !txtQuantity.getText().isEmpty()) {
            return false;
        } else if (formType.equals("new") && !txtName.getText().isEmpty() && !txtPrice.getText().isEmpty()
                && !txtDescription.getText().isEmpty() && !txtQuantity.getText().isEmpty()) {
            return false;
        }
        return true;
    }

    private boolean isNumeric(String s) {
        try {
            double d = Double.parseDouble(s);
            if (d >= 0.0) {
                return true;
            } else {
                JOptionPane.showMessageDialog(this, "Please enter the double positive Price");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "" + e);
        }
        return false;
    }

    private void clear() {
        setVisible(false);
        new ManageProduct().setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        comboCategory = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Impact", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Product");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 12, 277, -1));

        productTable.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Quantity", "Description", "Category ID", "Category Name", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        productTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(productTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 69, 463, 525));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel2.setText("Name");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 93, 133, -1));

        txtName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtName.setToolTipText("");
        getContentPane().add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 131, 325, 28));

        lblQuantity.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        lblQuantity.setText("Quantity");
        getContentPane().add(lblQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 177, 122, -1));

        txtQuantity.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtQuantity.setToolTipText("");
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQuantityKeyTyped(evt);
            }
        });
        getContentPane().add(txtQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 215, 325, 28));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel4.setText("Price");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 261, 79, -1));

        txtPrice.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtPrice.setToolTipText("");
        getContentPane().add(txtPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 299, 325, 28));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel5.setText("Description");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 345, 142, -1));

        txtDescription.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtDescription.setToolTipText("");
        txtDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescriptionActionPerformed(evt);
            }
        });
        getContentPane().add(txtDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 383, 325, 28));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel6.setText("Category");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 429, 88, -1));

        comboCategory.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        comboCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCategory.setToolTipText("");
        getContentPane().add(comboCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 467, 325, 28));

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 513, -1, -1));

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 513, -1, -1));

        btnReset.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        getContentPane().add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(658, 513, -1, -1));

        btnClose.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(742, 513, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pk_image/All_page_Background.png"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        getAllCategory();
        product.getProductData(productTable);
        btnUpdate.setEnabled(false);
    }//GEN-LAST:event_formComponentShown

    private void txtDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescriptionActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (!validateFields("new")) {
            product = new Product();
            product.setName(txtName.getText());
            product.setQuantity(Integer.parseInt(txtQuantity.getText()));

            if (isNumeric(txtPrice.getText())) {
                product.setPrice(Double.parseDouble(txtPrice.getText()));
            } else {
                return;
            }
            product.setDescription(txtDescription.getText());

            String category = comboCategory.getSelectedItem().toString();
            int categoryID = Integer.parseInt(category.substring(0, category.indexOf('-')));
            String categoryName = category.substring(category.indexOf('-') + 1);
            product.setCategory(categoryID, categoryName);
            if (product.isProductExist()) {
                product.insert();
                clear();
            }
        } else {
            JOptionPane.showMessageDialog(this, "All fields are required");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_btnResetActionPerformed

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        // TODO add your handling code here:
        int index = 0;
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        index = productTable.getSelectedRow();

        productpk = Integer.parseInt(model.getValueAt(index, 0).toString());
        totalQuantity = Integer.parseInt(model.getValueAt(index, 2).toString());

        txtName.setText(model.getValueAt(index, 1).toString());
        txtQuantity.setText(model.getValueAt(index, 2).toString());
        txtPrice.setText(model.getValueAt(index, 3).toString());
        txtDescription.setText(model.getValueAt(index, 4).toString());
        String category = model.getValueAt(index, 5).toString() + "-" + model.getValueAt(index, 6).toString();
        comboCategory.removeAllItems();
        comboCategory.addItem(category);

        btnSave.setEnabled(false);
        btnUpdate.setEnabled(true);

        comboCategory.setBackground(Color.DARK_GRAY);
    }//GEN-LAST:event_productTableMouseClicked

    private void txtQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtQuantityKeyTyped

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        product = new Product();
        if (!validateFields("edit")) {
            product.setProduct_pk(productpk);
            product.setName(txtName.getText());
            String price = txtPrice.getText();
            if (isNumeric(price)) {
                product.setPrice(Double.parseDouble(price));
            } else {
                return;
            }
            product.setDescription(txtDescription.getText());
            product.setQuantity(Integer.parseInt(txtQuantity.getText()));
            if (product.isProductExist()) {
                product.update();
                clear();
            }

        } else {
            JOptionPane.showMessageDialog(this, "All fields are required");

        }
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JTable productTable;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
